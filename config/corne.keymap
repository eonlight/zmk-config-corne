// mouse movement
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 30    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <190>; // leave at 190
};

// define layers
#define BLYR 0
#define LLYR 1
#define RLYR 2
#define NLYR 3
#define QLYR 4
#define SLYR 5


/ {

// ----------------------------------------------------------------------------|
// |  0  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  10 |  11 |
// |  12 |  13 |  14 |  15 |  16 |  17 |   |  18 |  19 |  20 |  21 |  22 |  23 |
// |  24 |  25 |  26 |  27 |  28 |  29 |   |  30 |  31 |  32 |  33 |  34 |  35 |
//                   |  36 |  37 |  38 |   |  39 |  40 |  41 |
// ----------------------------------------------------------------------------|

    combos {
        compatible = "zmk,combos";

        combo_left_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };

        combo_left_del {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp DEL>;
        };

        combo_left_tab {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp TAB>;
        };

        combo_left_home_tab {
            // lowered the timeout because it was being triggered too often
            timeout-ms = <20>;
            key-positions = <15 16>;
            bindings = <&kp TAB>;
        };

        combo_left_bspc {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp BSPC>;
        };

    };

    // when layer LEFT and RIGHT are pressed go to NAV layer
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LLYR RLYR>;
            then-layer = <NLYR>;
        };
    };

    behaviors {
        tdll: tap_dance_layer_left {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MO_LAYERS_LEFT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LLYR>, <&to QLYR>, <&to SLYR>;
        };

        tdlr: tap_dance_layer_right {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MO_LAYERS_RIGHT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo RLYR>, <&to NLYR>, <&to SLYR>;
        };
    };

    keymap {
        compatible = "zmk,keymap";


// --------------------------------------------------------------------------------|
// | NONE |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I   |  O  |  P  | NONE |
// | NONE |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K   |  L  |  ;  | NONE |
// | NONE |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,   |  .  |  /  | NONE |
//                    | BSP | LWR | SPC |   | ENT | RSE  | SYS  |
// --------------------------------------------------------------------------------|

        default_layer {
            bindings = <
 &none &kp Q       &kp W      &kp F       &kp P      &kp B            &kp J    &kp L      &kp U       &kp Y      &kp SEMI    &none
 &none &mt LSHFT A &mt LALT R &mt LCTRL S &mt LGUI T &kp G            &kp K    &mt LGUI N &mt LCTRL E &mt LALT I &mt LSHFT O &none
 &none &kp Z       &kp X      &kp C       &kp D      &kp V            &kp M    &kp H      &kp COMMA   &kp DOT    &kp FSLH    &none
                              &kp BSPC    &tdll      &kp SPACE        &kp RET  &tdlr      &mo SLYR
            >;
        };


// 1 2 3 4 5    = < > y _
// 6 7 8 9 0    ? ' | & -
// ` x c d v    % + , " \

        left_layer {
            bindings = <
 &none &kp N1    &kp N2 &kp N3 &kp N4 &kp N5        &kp EQUAL &kp LT       &kp GT         &trans        &kp UNDER       &none
 &none &kp N6    &kp N7 &kp N8 &kp N9 &kp N0        &kp QMARK &mt LGUI SQT &mt LCTRL PIPE &mt LALT AMPS &mt LSHFT MINUS &none
 &none &kp GRAVE &trans &trans &trans &trans        &kp PRCNT &kp PLUS     &trans         &kp DQT       &kp BSLH        &none
                        &none  &trans &trans        &kp DEL   &trans       &none
            >;
        };

// ! @ [ ] ^    PUP BLN NONE ELN ;
// ~ $ ( ) #    PDN LT  DN   RT  UP
// ` x { } *    m   h   ,    .   /

        right_layer {
            bindings = <
 &none &kp EXCL        &kp AT        &kp LBKT       &kp RBKT      &kp CARET        &kp PG_UP  &kp LC(A) &none    &kp LC(E) &trans &none
 &none &mt LSHFT TILDE &mt LALT DLLR &mt LCTRL LPAR &mt LGUI RPAR &kp HASH         &kp PG_DN  &kp LEFT  &kp DOWN &kp RIGHT &kp UP &none
 &none &kp GRAVE       &trans        &kp LBRC       &kp RBRC      &kp STAR         &trans     &trans    &trans   &trans    &trans &none
                                    &none           &trans        &kp BSPC         &trans     &trans    &none
            >;
        };

// q   SDN MUP SUP b    PP VDN VUP PRV NXT
// LCK MLT MDN MRT g    k  LGI LCT LAT RCK
// z   x   c   d   v    h  BDN BUP .   /

//        navigation_layer {
//            bindings = <
// &none &trans    &msc SCRL_UP   &mmv MOVE_UP   &msc SCRL_DOWN  &trans        &kp C_PP     &kp C_VOL_DN &kp C_VOL_UP &kp C_PREV &kp C_NEXT &none
// &none &mkp LCLK &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &trans        &trans       &kp LGUI     &kp LCTRL    &kp LALT   &mkp RCLK  &none
// &none &trans    &trans    &trans    &trans    &trans          &trans        &kp C_BRI_DN &kp C_BRI_UP &trans       &trans                &none
//                                     &none     &trans          &trans        &kp C_MUTE   &trans       &none
//            >;
//        };

        navigation_layer {
            bindings = <
 &none &kp C_PREV &kp C_NEXT &kp C_VOL_DN &kp C_VOL_UP &trans            &kp C_PP &msc SCRL_UP   &msc SCRL_DOWN &trans          &trans       &none
 &none &trans     &kp LALT   &kp LCTRL    &kp LGUI     &trans            &trans   &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &mmv MOVE_UP &none
 &none &trans     &trans     &kp C_BRI_DN &kp C_BRI_UP &trans            &trans   &mkp LCLK      &trans         &trans          &mkp RCLK    &none
                             &none        &to BLYR     &kp C_MUTE        &trans   &trans         &none
            >;
        };

        qwerty_layer {
            bindings = <
 &none &kp Q &kp W &kp E &kp R    &kp T            &kp Y   &kp U    &kp I     &kp O   &kp P    &none
 &none &kp A &kp S &kp D &kp F    &kp G            &kp H   &kp J    &kp K     &kp L   &kp SEMI &none
 &none &kp Z &kp X &kp C &kp V    &kp B            &kp N   &kp M    &kp COMMA &kp DOT &kp FSLH &none
                   &none &to BLYR &kp SPACE        &kp RET &mo RLYR &none
            >;
        };

        system_layer {
            bindings = <
 &none &bootloader &trans &trans &studio_unlock              &trans        &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &trans &none
 &none &trans      &trans &trans &trans                      &trans        &trans &trans &trans &trans &trans &none
 &none &trans      &trans &ext_power EP_OFF &ext_power EP_ON &trans        &trans &rgb_ug RGB_ON &rgb_ug RGB_OFF &trans &trans &none
                          &none  &to BLYR                    &trans        &trans &trans &none
            >;
        };

    };
};
